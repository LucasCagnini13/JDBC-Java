package model.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mysql.cj.xdevapi.PreparableStatement;

import Db.DB;
import Db.DbExcepition;
import model.Entities.Department;
import model.Entities.Seller;
import model.dao.SellerDao;

public class SellerDaoJDBC implements SellerDao {

	private Connection conn;

	public SellerDaoJDBC(Connection conn) {

		this.conn = conn;
	}

	@Override
	public void insert(Seller obj) {
		
		PreparedStatement st = null;
		ResultSet rs = null;
		
		try {
			
			st = conn.prepareStatement(
					"INSERT INTO seller "
					+"(Name, Email, BirthDate, BaseSalary, DepartmentId) "
					+"VALUES "
					+"(?, ?, ?, ?, ?)",
					Statement.RETURN_GENERATED_KEYS
					);
			
			st.setString(1, obj.getName());
			st.setString(2, obj.getEmail());
			st.setDate(3, new java.sql.Date(obj.getBirthDate().getTime()));
			st.setDouble(4, obj.getBaseSalary());
			st.setInt(5, obj.getDepartment().getId());
			
			int rowsAffecteds = st.executeUpdate();
			
			rs = st.getGeneratedKeys();
			
			if(rowsAffecteds > 0) {
				if(rs.next()) {
					
					int id = rs.getInt(1);
					obj.setId(id);
				}
			}else {
				throw new DbExcepition("Unexpected error! No rows affecteds");
			}
				
		}catch (SQLException e) {
			throw new DbExcepition(e.getMessage());
		}finally {
			DB.closeStatement(st);
			
		}
	}

	@Override
	public void update(Seller obj) {
		
		
	}

	@Override
	public void deleteById(Integer id) {
		// TODO Auto-generated method stub

	}

	@Override
	public Seller findById(Integer id) {

		PreparedStatement st = null;
		ResultSet rs = null;
		try {

			st = conn.prepareStatement(
					"SELECT seller.*,department.Name as DepName " + "FROM seller INNER JOIN department "
							+ "ON seller.DepartmentId = department.Id " + "WHERE seller.Id = ?");

			st.setInt(1, id);

			rs = st.executeQuery();

			if (rs.next()) {

				Department department = instantiateDepartment(rs.getInt("DepartmentId"), rs.getNString("DepName"));
				Seller seller = instantiateSeller(rs.getInt("Id"), rs.getNString("Name"), rs.getNString("Email"),
						rs.getDate("BirthDate"), rs.getDouble("BaseSalary"), department);
				return seller;
			}

		} catch (Exception e) {
			throw new DbExcepition(e.getMessage());
		}

		return null;
	}

	@Override
	public List<Seller> findByDepartment(Department department) {

		PreparedStatement st = null;
		ResultSet rs = null;
		int departmentId = department.getId();
		try {

			st = conn.prepareStatement(
					"SELECT seller.*,department.Name as DepName " + "FROM seller INNER JOIN department "
							+ "ON seller.DepartmentId = department.Id " + "WHERE DepartmentId = ? " + "ORDER BY Name");

			st.setInt(1, departmentId);

			rs = st.executeQuery();

			List<Seller> list = new ArrayList<>();
			Map<Integer, Department> map = new HashMap<>();

			while (rs.next()) {

				Department dep = map.get(rs.getString("DepartmentId"));

				if (dep == null) {
					dep = instantiateDepartment(rs.getInt("DepartmentId"), rs.getNString("DepName"));
					map.put(rs.getInt("DepartmentId"), dep);

				}

				Seller seller = instantiateSeller(rs.getInt("Id"), rs.getNString("Name"), rs.getNString("Email"),
						rs.getDate("BirthDate"), rs.getDouble("BaseSalary"), department);
				list.add(seller);
			}
			return list;

		} catch (Exception e) {
			throw new DbExcepition(e.getMessage());
		}

	}

	@Override
	public List<Seller> findAll() {

		PreparedStatement st = null;
		ResultSet rs = null;
	
		try {

			st = conn.prepareStatement(
					"SELECT seller.*,department.Name as DepName " + "FROM seller INNER JOIN department "
							+ "ON seller.DepartmentId = department.Id " + "ORDER BY Name");

			rs = st.executeQuery();

			List<Seller> list = new ArrayList<>();
			Map<Integer, Department> map = new HashMap<>();

			while (rs.next()) {

				Department dep = map.get(rs.getString("DepartmentId"));

				if (dep == null) {
					dep = instantiateDepartment(rs.getInt("DepartmentId"), rs.getNString("DepName"));
					map.put(rs.getInt("DepartmentId"), dep);

				}

				Seller seller = instantiateSeller(rs.getInt("Id"), rs.getNString("Name"), rs.getNString("Email"),
						rs.getDate("BirthDate"), rs.getDouble("BaseSalary"), dep);
				list.add(seller);
			}
			return list;

		} catch (Exception e) {
			throw new DbExcepition(e.getMessage());
		}
	}

	public Department instantiateDepartment(int id, String nome) {

		return new Department(id, nome);

	}

	public Seller instantiateSeller(int id, String nome, String email, Date data, double baseSalary,
			Department department) {

		return new Seller(id, nome, email, data, baseSalary, department);

	}
}
