package model.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import Db.DB;
import Db.DbExcepition;
import model.Entities.Department;
import model.dao.DepartmentDao;

public class DepartmentDaoJDBC implements DepartmentDao {

	private Connection conn;

	public DepartmentDaoJDBC(Connection conn) {

		this.conn = conn;
	}

	@Override
	public void insert(Department obj) {

		PreparedStatement st = null;
		ResultSet rs = null;

		try {

			st = conn.prepareStatement("INSERT INTO department " + "(Name) " + "VALUES " + "(?)",
					Statement.RETURN_GENERATED_KEYS);

			st.setString(1, obj.getNome());

			int rowsAffecteds = st.executeUpdate();

			rs = st.getGeneratedKeys();

			if (rowsAffecteds > 0) {
				if (rs.next()) {

					int id = rs.getInt(1);
					obj.setId(id);

				}
			} else {
				throw new DbExcepition("Unexpected error! No rows affecteds");
			}

		} catch (SQLException e) {

			throw new DbExcepition(e.getMessage());
		} finally {
			DB.closeStatement(st);
			DB.closeResultSet(rs);
		}

	}

	@Override
	public void update(Department obj) {

		PreparedStatement st = null;
		ResultSet rs = null;

		try {

			st = conn.prepareStatement("UPDATE department " + "SET Name = ?" + "WHERE Id = ?");

			st.setString(1, obj.getNome());
			st.setInt(2, obj.getId());

		} catch (SQLException e) {

			throw new DbExcepition(e.getMessage());
		} finally {
			DB.closeStatement(st);
			DB.closeResultSet(rs);
		}

	}

	@Override
	public void deleteById(Integer id) {

	}

	@Override
	public Department findById(Integer id) {

		PreparedStatement st = null;
		ResultSet rs = null;

		try {

			st = conn.prepareStatement("SELECT * from department " + "WHERE department.Id = ?");

			st.setInt(1, id);

			rs = st.executeQuery();

			if (rs.next()) {

				Department department = new Department(rs.getInt(1), rs.getString(2));
				return department;
			}

		} catch (Exception e) {

			throw new DbExcepition(e.getMessage());
		} finally {

			DB.closeResultSet(rs);
			DB.closeStatement(st);
		}

		return null;
	}

	@Override
	public List<Department> findAll() {

		PreparedStatement st = null;
		ResultSet rs = null;

		try {
			st = conn.prepareStatement("SELECT * from department " + "ORDER BY Name ");

			rs = st.executeQuery();

			List<Department> list = new ArrayList<>();

			while (rs.next()) {

				Department department = new Department(rs.getInt(1), rs.getString(2));
				list.add(department);
			}

			return list;

		} catch (SQLException e) {
			throw new DbExcepition(e.getMessage());

		} finally {

			DB.closeResultSet(rs);
			DB.closeStatement(st);
		}
	}
}
